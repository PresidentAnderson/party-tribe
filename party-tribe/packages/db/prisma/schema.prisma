// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  name      String?
  bio       String?
  avatar    String?
  verified  Boolean  @default(false)
  
  // Auth fields
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  
  // Party Tribe specific fields
  isOrganizer   Boolean @default(false)
  tribes        TribeMembership[]
  events        Event[]
  attendances   EventAttendance[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Tribe {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  avatar      String?
  banner      String?
  isPrivate   Boolean  @default(false)
  
  members     TribeMembership[]
  events      Event[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tribes")
}

model TribeMembership {
  id      String @id @default(cuid())
  userId  String
  tribeId String
  role    TribeRole @default(MEMBER)
  
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  tribe Tribe @relation(fields: [tribeId], references: [id], onDelete: Cascade)
  
  joinedAt DateTime @default(now())

  @@unique([userId, tribeId])
  @@map("tribe_memberships")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String?
  location    String?
  venue       String?
  
  startDate   DateTime
  endDate     DateTime?
  timezone    String   @default("UTC")
  
  capacity    Int?
  price       Float?
  currency    String   @default("USD")
  
  isPublic    Boolean  @default(true)
  status      EventStatus @default(DRAFT)
  
  // Images and media
  coverImage  String?
  images      String[]
  
  // Organizer info
  organizerId String
  organizer   User   @relation(fields: [organizerId], references: [id])
  
  // Tribe association (optional)
  tribeId     String?
  tribe       Tribe? @relation(fields: [tribeId], references: [id])
  
  // Attendees
  attendances EventAttendance[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("events")
}

model EventAttendance {
  id        String @id @default(cuid())
  userId    String
  eventId   String
  status    AttendanceStatus @default(GOING)
  
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  registeredAt DateTime @default(now())

  @@unique([userId, eventId])
  @@map("event_attendances")
}

enum TribeRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
  COMPLETED
}

enum AttendanceStatus {
  GOING
  MAYBE
  NOT_GOING
}