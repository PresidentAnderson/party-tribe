// Party Tribeâ„¢ Platform - Prisma Schema
// Generated: 2025-10-19

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum AuthProvider {
  EMAIL
  GOOGLE
  APPLE
  FACEBOOK
}

enum TribeMemberRole {
  OWNER
  ORGANIZER
  MEMBER
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
  COMPLETED
}

enum DoorPolicy {
  OPEN
  MEMBER_ONLY
  INVITE_ONLY
  APPROVAL_REQUIRED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REFUNDED
}

enum TicketStatus {
  ACTIVE
  USED
  CANCELLED
  TRANSFERRED
}

enum ReferralRewardType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_TICKET
}

enum AssetType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum ModerationAction {
  WARNING
  CONTENT_REMOVAL
  TEMPORARY_BAN
  PERMANENT_BAN
  ACCOUNT_SUSPENSION
}

enum ModerationSubjectType {
  USER
  TRIBE
  EVENT
  COMMENT
  MESSAGE
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

// Models
model User {
  id            String       @id @default(cuid())
  email         String       @unique
  phone         String?
  name          String
  avatar        String?
  location      String?
  authProvider  AuthProvider @map("auth_provider")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")

  // Relations
  ownedTribes   Tribe[]        @relation("TribeOwner")
  memberships   TribeMember[]
  createdEvents Event[]        @relation("EventCreator")
  orders        Order[]
  referrals     Referral[]     @relation("ReferralOwner")

  @@map("users")
}

model Tribe {
  id              String   @id @default(cuid())
  slug            String   @unique
  name            String
  bio             String?
  coverUrl        String?  @map("cover_url")
  brandPrimary    String?  @map("brand_primary")
  brandSecondary  String?  @map("brand_secondary")
  socialLinks     Json?    @map("social_links")
  ownerId         String   @map("owner_id")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  owner         User            @relation("TribeOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members       TribeMember[]
  events        Event[]
  coHostedEvents EventCoHost[]
  assets        Asset[]
  referrals     Referral[]
  payouts       Payout[]

  @@index([slug])
  @@index([ownerId])
  @@map("tribes")
}

model TribeMember {
  userId    String           @map("user_id")
  tribeId   String           @map("tribe_id")
  role      TribeMemberRole
  joinedAt  DateTime         @default(now()) @map("joined_at")

  // Relations
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  tribe     Tribe            @relation(fields: [tribeId], references: [id], onDelete: Cascade)

  @@id([userId, tribeId])
  @@index([tribeId, role])
  @@map("tribe_members")
}

model Event {
  id                String      @id @default(cuid())
  tribeId           String      @map("tribe_id")
  slug              String      @unique
  title             String
  description       String?
  startAt           DateTime    @map("start_at")
  endAt             DateTime?   @map("end_at")
  timezone          String
  venueName         String?     @map("venue_name")
  venueAddress      String?     @map("venue_address")
  lat               Float?
  lng               Float?
  status            EventStatus @default(DRAFT)
  doorPolicy        DoorPolicy  @map("door_policy")
  ageLimit          Int?        @map("age_limit")
  tags              String[]
  capacityTotal     Int?        @map("capacity_total")
  capacityRemaining Int?        @map("capacity_remaining")
  createdBy         String      @map("created_by")
  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @updatedAt @map("updated_at")

  // Relations
  tribe         Tribe           @relation(fields: [tribeId], references: [id], onDelete: Cascade)
  creator       User            @relation("EventCreator", fields: [createdBy], references: [id])
  coHosts       EventCoHost[]
  ticketTiers   TicketTier[]
  orders        Order[]
  assets        Asset[]
  referrals     Referral[]

  @@index([slug])
  @@index([tribeId])
  @@index([status])
  @@index([startAt])
  @@index([createdBy])
  @@map("events")
}

model EventCoHost {
  eventId      String @map("event_id")
  tribeId      String @map("tribe_id")
  revShareBps  Int    @map("rev_share_bps") // Revenue share in basis points (1/100 of a percent)

  // Relations
  event        Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tribe        Tribe  @relation(fields: [tribeId], references: [id], onDelete: Cascade)

  @@id([eventId, tribeId])
  @@map("event_co_hosts")
}

model TicketTier {
  id                String    @id @default(cuid())
  eventId           String    @map("event_id")
  name              String
  priceCents        Int       @map("price_cents")
  currency          String    @default("USD")
  quantityTotal     Int       @map("quantity_total")
  quantityRemaining Int       @map("quantity_remaining")
  isMemberOnly      Boolean   @default(false) @map("is_member_only")
  minAge            Int?      @map("min_age")
  salesStartAt      DateTime? @map("sales_start_at")
  salesEndAt        DateTime? @map("sales_end_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  event             Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tickets           Ticket[]

  @@index([eventId])
  @@index([salesStartAt, salesEndAt])
  @@map("ticket_tiers")
}

model Order {
  id                    String      @id @default(cuid())
  eventId               String      @map("event_id")
  userId                String      @map("user_id")
  status                OrderStatus @default(PENDING)
  totalCents            Int         @map("total_cents")
  currency              String      @default("USD")
  stripePaymentIntentId String?     @map("stripe_payment_intent_id")
  referralCode          String?     @map("referral_code")
  promoCodeId           String?     @map("promo_code_id")
  createdAt             DateTime    @default(now()) @map("created_at")
  updatedAt             DateTime    @updatedAt @map("updated_at")

  // Relations
  event                 Event       @relation(fields: [eventId], references: [id])
  user                  User        @relation(fields: [userId], references: [id])
  tickets               Ticket[]

  @@index([eventId])
  @@index([userId])
  @@index([status])
  @@index([referralCode])
  @@map("orders")
}

model Ticket {
  id           String       @id @default(cuid())
  orderId      String       @map("order_id")
  ticketTierId String       @map("ticket_tier_id")
  holderName   String       @map("holder_name")
  holderEmail  String       @map("holder_email")
  qrCode       String       @unique @map("qr_code")
  status       TicketStatus @default(ACTIVE)
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")

  // Relations
  order        Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  ticketTier   TicketTier   @relation(fields: [ticketTierId], references: [id])

  @@index([orderId])
  @@index([ticketTierId])
  @@index([qrCode])
  @@index([holderEmail])
  @@map("tickets")
}

model Referral {
  id               String              @id @default(cuid())
  code             String              @unique
  ownerUserId      String              @map("owner_user_id")
  tribeId          String?             @map("tribe_id")
  eventId          String?             @map("event_id")
  rewardType       ReferralRewardType  @map("reward_type")
  rewardValue      Int                 @map("reward_value") // In cents for monetary rewards, percentage for percentage rewards
  redemptionCount  Int                 @default(0) @map("redemption_count")
  maxRedemptions   Int?                @map("max_redemptions")
  createdAt        DateTime            @default(now()) @map("created_at")
  updatedAt        DateTime            @updatedAt @map("updated_at")

  // Relations
  owner            User                @relation("ReferralOwner", fields: [ownerUserId], references: [id], onDelete: Cascade)
  tribe            Tribe?              @relation(fields: [tribeId], references: [id], onDelete: Cascade)
  event            Event?              @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([code])
  @@index([ownerUserId])
  @@index([tribeId])
  @@index([eventId])
  @@map("referrals")
}

model Asset {
  id        String    @id @default(cuid())
  eventId   String?   @map("event_id")
  tribeId   String?   @map("tribe_id")
  type      AssetType
  url       String
  meta      Json?     // Metadata like file size, dimensions, etc.
  createdAt DateTime  @default(now()) @map("created_at")

  // Relations
  event     Event?    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tribe     Tribe?    @relation(fields: [tribeId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([tribeId])
  @@index([type])
  @@map("assets")
}

model Moderation {
  id           String                 @id @default(cuid())
  subjectType  ModerationSubjectType  @map("subject_type")
  subjectId    String                 @map("subject_id")
  action       ModerationAction
  reason       String
  actorAdminId String                 @map("actor_admin_id")
  createdAt    DateTime               @default(now()) @map("created_at")

  @@index([subjectType, subjectId])
  @@index([actorAdminId])
  @@index([createdAt])
  @@map("moderation")
}

model Payout {
  id               String        @id @default(cuid())
  tribeId          String        @map("tribe_id")
  periodStart      DateTime      @map("period_start")
  periodEnd        DateTime      @map("period_end")
  amountCents      Int           @map("amount_cents")
  currency         String        @default("USD")
  stripeTransferId String?       @map("stripe_transfer_id")
  status           PayoutStatus  @default(PENDING)
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")

  // Relations
  tribe            Tribe         @relation(fields: [tribeId], references: [id], onDelete: Cascade)

  @@index([tribeId])
  @@index([status])
  @@index([periodStart, periodEnd])
  @@map("payouts")
}